import { promises as fs } from 'fs'
import path from 'path'
import { rimraf } from 'rimraf'
import registry from '../registry/index.js'

console.log('üèóÔ∏è  Building registry...')

async function buildRegistry() {
  // 1. Generate component index
  await buildRegistryIndex()

  // 2. Generate JSON API files
  await buildRegistryJsonFile()

  // 3. Build public API
  await buildPublicAPI()

  console.log('‚úÖ Registry build complete')
}

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`

  for (const item of registry.items) {
    const componentPath = item.files?.[0]?.path
      ? `@/registry/base-ui-v4/${item.files[0].path}`
      : ''

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ''}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies || [])},
    files: ${JSON.stringify(
      item.files?.map(file => ({
        path: `registry/base-ui-v4/${file.path}`,
        type: file.type,
        target: file.target ?? '',
      })) || []
    )},
    component: ${
      componentPath
        ? `React.lazy(async () => {
      try {
        const mod = await import("${componentPath}")
        const exportName = Object.keys(mod).find(key => 
          typeof mod[key] === 'function' || typeof mod[key] === 'object'
        ) || "${item.name}"
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error("Failed to load component ${item.name}:", error)
        return { default: () => React.createElement("div", null, "Component failed to load") }
      }
    })`
        : 'null'
    },
    categories: ${JSON.stringify(item.meta?.categories || [])},
    meta: ${JSON.stringify(item.meta || {})},
    baseUI: ${JSON.stringify(item.baseUI || {})},
  },`
  }

  index += `
}`

  await fs.writeFile('registry/__index__.tsx', index)
  console.log('üìù Generated registry index')
}

async function buildRegistryJsonFile() {
  const fixedRegistry = {
    ...registry,
    items: registry.items.map(item => {
      // Read actual file content
      const files = item.files?.map(file => ({
        ...file,
        path: `registry/base-ui-v4/${file.path}`,
      }))

      return { ...item, files }
    }),
  }

  await fs.writeFile('registry.json', JSON.stringify(fixedRegistry, null, 2))
  console.log('üìù Generated registry.json')
}

async function buildPublicAPI() {
  const outputDir = path.join(process.cwd(), 'public/r')

  // Clean output directory
  await rimraf(outputDir)
  await fs.mkdir(outputDir, { recursive: true })

  // Generate index.json
  await fs.writeFile(
    path.join(outputDir, 'index.json'),
    JSON.stringify(registry, null, 2)
  )

  // Generate individual component files
  const stylesDir = path.join(outputDir, 'styles', 'base-ui-v4')
  await fs.mkdir(stylesDir, { recursive: true })

  for (const item of registry.items) {
    await fs.writeFile(
      path.join(stylesDir, `${item.name}.json`),
      JSON.stringify(item, null, 2)
    )
  }

  console.log('üìù Generated public API files')
}

// Validate registry before building
function validateRegistry() {
  const errors: string[] = []

  for (const item of registry.items) {
    // Check for required fields
    if (!item.name) errors.push(`Item missing name`)
    if (!item.type) errors.push(`Item ${item.name} missing type`)

    // Check file references
    // Note: File existence check would be done here in real implementation

    // Check registry dependencies
    for (const dep of item.registryDependencies || []) {
      if (!registry.items.find(i => i.name === dep)) {
        errors.push(
          `Registry dependency not found: ${dep} (required by ${item.name})`
        )
      }
    }
  }

  if (errors.length > 0) {
    console.error('‚ùå Registry validation failed:')
    errors.forEach(error => console.error(`  - ${error}`))
    process.exit(1)
  }

  console.log('‚úÖ Registry validation passed')
}

async function main() {
  try {
    validateRegistry()
    await buildRegistry()
  } catch (error) {
    console.error('‚ùå Registry build failed:', error)
    process.exit(1)
  }
}

main()
