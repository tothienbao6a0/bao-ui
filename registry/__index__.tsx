/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react'

export const Index: Record<string, any> = {
  button: {
    name: 'button',
    description: 'Displays a button or a component that looks like a button.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/button.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/button.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'button'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component button:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: [], version: '1.0.0-beta.1' },
  },
  utils: {
    name: 'utils',
    description: 'Utility functions for class merging and common operations.',
    type: 'registry:lib',
    registryDependencies: [],
    files: [
      {
        path: 'registry/base-ui-v4/lib/utils.ts',
        type: 'registry:lib',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/lib/utils.ts')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'utils'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component utils:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: {},
  },
  badge: {
    name: 'badge',
    description: 'Displays a badge or a component that looks like a badge.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/badge.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/badge.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'badge'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component badge:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: [], version: '1.0.0-beta.1' },
  },
  input: {
    name: 'input',
    description:
      'Displays a form input or a component that functions as an input.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/input.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/input.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'input'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component input:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Input'], version: '1.0.0-beta.1' },
  },
  checkbox: {
    name: 'checkbox',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/checkbox.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/checkbox.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'checkbox'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component checkbox:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Checkbox'], version: '1.0.0-beta.1' },
  },
  'radio-group': {
    name: 'radio-group',
    description:
      'A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/radio.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/radio.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'radio-group'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component radio-group:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['RadioGroup', 'Radio'], version: '1.0.0-beta.1' },
  },
  select: {
    name: 'select',
    description:
      'Displays a list of options for the user to pick from—triggered by a button.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/select.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/select.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'select'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component select:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Select'], version: '1.0.0-beta.1' },
  },
  switch: {
    name: 'switch',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/switch.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/switch.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'switch'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component switch:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Switch'], version: '1.0.0-beta.1' },
  },
  dialog: {
    name: 'dialog',
    description:
      'A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/dialog.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/dialog.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'dialog'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component dialog:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Dialog'], version: '1.0.0-beta.1' },
  },
  tooltip: {
    name: 'tooltip',
    description:
      'A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.',
    type: 'registry:ui',
    registryDependencies: ['utils'],
    files: [
      {
        path: 'registry/base-ui-v4/ui/tooltip.tsx',
        type: 'registry:ui',
        target: '',
      },
    ],
    component: React.lazy(async () => {
      try {
        const mod = await import('@/registry/base-ui-v4/ui/tooltip.tsx')
        const exportName =
          Object.keys(mod).find(
            key =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object'
          ) || 'tooltip'
        return { default: mod.default || mod[exportName] }
      } catch (error) {
        console.error('Failed to load component tooltip:', error)
        return {
          default: () =>
            React.createElement('div', null, 'Component failed to load'),
        }
      }
    }),
    categories: [],
    meta: {},
    baseUI: { components: ['Tooltip'], version: '1.0.0-beta.1' },
  },
}
